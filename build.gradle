plugins {
    id 'java'
}

group 'cs471'
version '1.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // FIXME: missing gson dependency, see
    // https://mvnrepository.com/artifact/com.google.code.gson/gson

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

//customize the gradle jar task to include a manifest with the correct main class
//usage:
//$ ./gradlew jar
jar {
    def fileNameOfCreatedJar = "${archiveBaseName.get()}-${archiveVersion.get()}.jar"
    //print ("\nfileNameOfCreatedJar = " + fileNameOfCreatedJar)

    manifest {
        attributes(
            'Main-Class': 'edu.boisestate.cs.cs471assignmentsbuilder.MainApp',

            //optional attributes
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
            'Implementation-Title': 'MainApp',
            'Implementation-Version': archiveVersion
        )
    }

    // the duplicatesStrategy is required by Gradle 7
    duplicatesStrategy = DuplicatesStrategy.INCLUDE //allow duplicate *.class files in the jar

    // include in the jar all external dependencies (e.g., gson)
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }

    // print instructions to run the jar, but only if the creation of the jar is successful
    {
        doLast {
            def outputFirstLine = 'The "' + fileNameOfCreatedJar + '" was created successfully. Run:'
            def outputSecondLine = '$ java -jar build/libs/' + fileNameOfCreatedJar + ' src/main/resources/SampleRepositoryData.json'

            def repeatLength = Math.max(outputFirstLine.length(), outputSecondLine.length())
            def lineSeparator = '-' * repeatLength

            println '\n' + lineSeparator
            println outputFirstLine
            println outputSecondLine
            println lineSeparator
        }

        onlyIf {
            state.failure == null
        }
    }
}
